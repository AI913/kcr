# vim: synyax=ruby

default_platform :ios

platform :ios do

  before_all do |lane|
  end

  after_all do |lane|
  end

  error do |lane, exception|
  end

  desc "Marge to master branch (Deploy to AppStore Connect)"
  lane :deploy do

    setup_library

    import_certificates
    api_key
    get_provisioning_profile

    run_tests
    # slather

    codecov
    # danger_wrapper

    increment_build_number
    clean_build_artifacts
    commit_version_bump(
      force: true,
      message: 'Auto build number update by fastlane.',
      xcodeproj: 'JobOrder.xcodeproj',
    )
    #push_to_git_remote(
    #  remote: "origin",
    #  local_branch: "HEAD",
    #  remote_branch: "staging",
    #  force: true,
    #  tags: false
    #)

    license_plist
    build_app
    upload_to_testflight
    jazzy_wrapper(deploy: true)
  end

  desc "Marge to staging branch (Deploy to AdHoc)"
  lane :stage do

    setup_library

    import_certificates
    api_key
    get_provisioning_profile(adhoc: true)

    run_tests
    # slather

    codecov
    # danger_wrapper

    license_plist
    build_app
    jazzy_wrapper
  end

  desc "Push to development branch"
  lane :cache_configuration do
    sh("cd .. && make prepare-ci")
  end

  desc "Push to development branch"
  lane :cache_library do
    setup_library
  end

  desc "https://gist.github.com/hjanuschka/94ba3678553ebcb40b97a62304eb8418"
  lane :danger_wrapper do
    remotes = sh("git ls-remote -q origin merge-requests\\*head|grep #{ENV['BITRISE_GIT_COMMIT']} || echo 'no mr' ")
    match_data = /.*merge-requests\/([0-9]+)\//.match(remotes)
    if match_data && match_data[1]
      ENV['CI_MERGE_REQUEST_ID'] =  match_data[1]
      danger(
        github_api_token: ENV["DANGER_GITLAB_API_TOKEN"],
        verbose: true
      )
    else 
      UI.important "not a MR"
    end
  end

  desc "Import certificates"
  private_lane :import_certificates do
    # キーチェーンを作成する
    create_keychain(
      name: ENV['KEYCHAIN_NAME'],
      password: ENV['KEYCHAIN_PASSWORD'],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: true
    )
    # 証明書をimport 。リポジトリのパスを指定
    import_certificate(
      keychain_name: ENV['KEYCHAIN_NAME'],
      keychain_password: ENV['KEYCHAIN_PASSWORD'],
      certificate_path: ENV['FASTLANE_CERTIFICATE_PATH'] + "/AppleWWDRCA.cer"
    )

    import_certificate(
      keychain_name: ENV['KEYCHAIN_NAME'],
      keychain_password: ENV['KEYCHAIN_PASSWORD'],
      certificate_path: ENV['FASTLANE_CERTIFICATE_PATH'] + "/dist.p12",
      certificate_password: ENV['CERT_PASSWORD']
    )
  end

  desc "Get API Key from App Store Connect"
  private_lane :api_key do
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
      key_filepath: ENV['FASTLANE_CERTIFICATE_PATH'] + "/AuthKey_SDT48H5453.p8",
      in_house: false
    )
  end

  desc "Auto upate build number"
  private_lane :increment_bundle_version do
    update_plist(
      plist_path: ENV['PLIST_PATH'],
      block: proc do |plist|
        plist["CFBundleVersion"] = (plist["CFBundleVersion"].to_i + 1).to_s
      end
    )
  end

  desc "Commit & Push"
  private_lane :commit_push do |options|
        git_commit(path: "./*", message: options[:message])
        push_to_git_remote
  end

  desc "Setup libraries"
  private_lane :setup_library do
    sh("cd .. && make prepare-ci")
    carthage(
      platform: "iOS",
      cache_builds: true,
    )
    cocoapods
  end

  desc "Lint in SwiftLint"
  private_lane :lint do
    sh("cd .. && make lint")
  end
  
  desc "Generate acknowledgement in LicensePlist"
  private_lane :license_plist do
    sh("cd .. && make generate-licenses")
  end
  
  desc "Send test result to codecov"
  private_lane :codecov do
    codecov_token = ENV["CODECOV_TOKEN"]
    codecov_reporter(
      token: codecov_token
    )
  end

  desc "Run jazzy in a wrapper"
  private_lane :jazzy_wrapper do |options|
    if options[:deploy]
      sh("cd .. && make generate-documents-release")
    else
      sh("cd .. && make generate-documents-adhoc")
    end
  end

  desc "Send result to MS Teams"
  private_lane :ms_teams do
    teams_url = ENV["MSTEAMS_WEBHOOK_URL"]
    teams(
      title: "Fastlane says hello",
      message: "App successfully released",
      facts:[
        {
          "name"=>"Platform",
          "value"=>"iOS"
        },
        {
          "name"=>"Lane",
          "value"=>"lane"
        }
      ],
      teams_url: teams_url
    )
  end
end
